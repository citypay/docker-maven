#!/bin/bash


. ./lib.sh

version='1.0'
readonly version

this_path=$(abspath "$0")       ## Path of this file including filename
myname=$(basename "${this_path}")     ## file name of this script.

usage () {
  cat <<EOF
  usage: ${myname} [options]
  -h           optional  Print this help message
  -i IMAGE     required  The image to scan
  -k KEY       required  The licence key for the scanner
EOF
}


# Get the flags
# If you add an option here, please
# remember to update usage() above.
while getopts h:i:k: args
do
  case $args in
  h) usage; exit 0 ;;
  i) image="$OPTARG" ;;
  k) key="$OPTARG" ;;
  *) usage; exit 1 ;;
  esac
done

if [ -z "$image" ]; then
  echo "No image provided"
  exit 1
else
    images=$(docker images -q $image)
    echo "using image $image, found $images"
fi

if [ -z "$key" ]; then
  echo "No licence key provided"
  exit 1
fi

yell "# ------------------------------------------------------------------------------
# CityPay - Aquasec Vulnerability Scan v$version
#
# Uses https://github.com/aquasecurity/microscanner to check for vulnerabilities at build time
# ------------------------------------------------------------------------------"


echo "FROM $image" > /tmp/Dockerfile
echo "COPY /microscanner / " >> /tmp/Dockerfile
echo "RUN /microscanner --version && /microscanner --continue-on-failure --html $key"  >> /tmp/Dockerfile
cat /tmp/Dockerfile


# build out the image and output the report to a file
# cd /tmp
info "Building"
# docker build --force-rm -t scan/$image -f - .
build_result=4
info "Build complete"

cat scan.data | sed -n '/<!DOCTYPE html>/,/<\/body>/p' | tail -n+1 > scan.html
xmllint --html -xpath '//*[@id="cves"]' scan.html 2>/dev/null 1>table.html
html2text table.html

if [ $build_result -ne 0 ]; then
    warn "ASV Scan FAILED"
    exit $build_result
    # todo attempt to print out html table...
else
    info "ASV Scan PASSED"
fi
