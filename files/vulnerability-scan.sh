#!/bin/bash



bldred='\033[1;31m'
bldgrn='\033[1;32m'
bldblu='\033[1;34m'
bldylw='\033[1;33m' # Yellow
txtrst='\033[0m'

# Returns the absolute path of a given string
abspath () { case "$1" in /*)printf "%s\n" "$1";; *)printf "%s\n" "$PWD/$1";; esac; }

logit () {
  printf "%b\n" "$1"
}


info () {
  printf "%b\n" "${bldblu}[INFO]${txtrst} $1"
}

pass () {
  printf "%b\n" "${bldgrn}[PASS]${txtrst} $1"
}

warn () {
  printf "%b\n" "${bldred}[WARN]${txtrst} $1"
}

note () {
  printf "%b\n" "${bldylw}[NOTE]${txtrst} $1"
}

yell () {
  printf "%b\n" "${bldylw}$1${txtrst}\n"
}


version='1.0'
readonly version

this_path=$(abspath "$0")       ## Path of this file including filename
myname=$(basename "${this_path}")     ## file name of this script.

usage () {
  cat <<EOF
  usage: ${myname} [options]
  -h           optional  Print this help message
  -i IMAGE     required  The image to scan
  -k KEY       required  The licence key for the scanner
EOF
}


# Get the flags
# If you add an option here, please
# remember to update usage() above.
while getopts h:i:k: args
do
  case $args in
  h) usage; exit 0 ;;
  i) image="$OPTARG" ;;
  k) key="$OPTARG" ;;
  *) usage; exit 1 ;;
  esac
done

if [ -z "$image" ]; then
  echo "No image provided"
  exit 1
else
    images=$(docker images -q $image)
    echo "using image $image, found $images"
fi

if [ -z "$key" ]; then
  echo "No licence key provided"
  exit 1
fi

yell "# ------------------------------------------------------------------------------
# CityPay - Aquasec Vulnerability Scan v$version
#
# Uses https://github.com/aquasecurity/microscanner to check for vulnerabilities at build time
# ------------------------------------------------------------------------------"


echo "FROM $image" > /tmp/Dockerfile
echo "ADD https://get.aquasec.com/microscanner /usr/bin/" >> /tmp/Dockerfile
echo "USER root" >> /tmp/Dockerfile
echo "RUN chmod +x /usr/bin/microscanner" >> /tmp/Dockerfile
echo "RUN /usr/bin/microscanner --version && /usr/bin/microscanner --continue-on-failure --html $key"  >> /tmp/Dockerfile
cat /tmp/Dockerfile


# build out the image and output the report to a file
# cd /tmp
info "Building"
docker build --force-rm -t scan/$image /tmp > scan.data
build_result=$?
info "Build complete"

cat scan.data | sed -n '/<!DOCTYPE html>/,/<\/body>/p' | tail -n+1 > scan.html
xmllint --html -xpath '//*[@id="cves"]' scan.html 2>/dev/null 1>table.html

html2text table.html

if [ $build_result -ne 0 ]; then
    warn "ASV Scan FAILED"
    exit $build_result
    # todo attempt to print out html table...
else
    pass "ASV Scan PASSED"
fi
